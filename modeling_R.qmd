---
title: "Demand Forecasting Model with R"
author: "Th. Senegas"
date: "2025-05-26"
toc: true
format:
  html:
    html-math-method: katex
    code-tools: true
    self-contained: true
execute:
  warning: false
---

I chose to forecast at the SKU × Location level for several reasons:

-   **Operational relevance**

    -   Inventory and replenishment decisions are made at the store (location) and item (SKU) level. By forecasting precisely where and what to stock, we can minimize stock-outs and overstock.

-   **Captures local demand patterns**

    -   Each location has its own seasonality, promotions, and customer mix.

-   **Supports hierarchical consistency**

    -   A bottom-up SKU×Location forecast can be aggregated automatically to Region or Family level views. That means our high-level dashboards always roll up correctly from the detailed forecasts driving operations.

-   **Manages noise vs. scale**

    -   With only 3 SKUs and 10 locations (30 series total), it’s a manageable modeling effort. We get the benefit of detailed forecasts without an unmanageable number of models.

-   **Flexibility for enhancements**

-   We can easily swap in covariates (e.g. price, promotions, local events) per SKU×Location, or test different algorithms (ARIMA, ETS, Prophet) on each series and still reconcile them back up.

By forecasting at the SKU × Location level, we ensure the most actionable, accurate, and consistent demand plans, while retaining the ability to roll up to any higher aggregation needed for reporting or strategic planning.

# 1. Data Prepation

```{r }
#| code-fold: true

# 0. Packages
library(tidyverse)
library(lubridate)
library(modeltime)   # forecasting bridges tidymodels + prophet + ARIMA + ETS
library(timetk)      # time‐series toolkit
library(rsample)     # for resampling
library(parsnip)     # model specification
library(recipes)     # feature engineering
library(workflows)   # bundling recipe + model
library(yardstick)   # metrics
library(tsibble) 

# 1) Read & prep
df_monthly <- read_csv("./data/df_monthly.csv") |>
  select(month, Location = `Location ID`, SKU, quantity) |>
  group_by(month, Location, SKU) |>
  summarise(quantity = sum(quantity), .groups = "drop") |>
  mutate(month = yearmonth(month)) |>
  as_tsibble(key = c(Location, SKU), index = month) |>
  fill_gaps(quantity = 0L)

df <- df_monthly |>
  select(month, Location, SKU, quantity) |>
  mutate(
    ds = yearmonth(month) |>  as.Date(),
    y  = quantity
  ) |>
  select(ds, y, Location, SKU)

# 2) Nest by series
nested_tbl <- df |> 
  group_by(Location, SKU) |> 
  nest() |> 
  ungroup()

```

# 2. Model Training & Evaluation
```{r}
#| code-fold: true
#| fig-column: page-right

set.seed(123)

# 3) Define a function to build a modeltime table per series
make_models <- function(data_tbl) {

  # a. Split train / test 
  splits <- initial_time_split(data_tbl, prop = (nrow(data_tbl) - 6) / nrow(data_tbl))

  # b. Recipe 
  rec <- recipe(y ~ ds, data = training(splits))
  
  # c. Model specs
  arima_spec <- arima_reg()      |>  set_engine("auto_arima")
  ets_spec   <- exp_smoothing()  |>  set_engine("ets")
  prop_spec  <- prophet_reg()    |>  set_engine("prophet")

  # d. Workflows
  wf_arima <- workflow() |>  add_model(arima_spec) |>  add_recipe(rec)
  wf_ets   <- workflow() |>  add_model(ets_spec)   |>  add_recipe(rec)
  wf_prop  <- workflow() |>  add_model(prop_spec)  |>  add_recipe(rec)

  # e. Modeltime table
  modeltime_table(
    arima = fit(wf_arima,  data = training(splits)),
    ets   = fit(wf_ets,    data = training(splits)),
    prop  = fit(wf_prop,   data = training(splits))
  ) |> 
    # f. Calibrate (generate forecasts on the test set)
    modeltime_calibrate(new_data = testing(splits)) |> 
    # g. Compute accuracy metrics
    modeltime_accuracy() |> 
    # h. Also embed the calibration object for later forecasting
    left_join(
      modeltime_table(
        arima = fit(wf_arima,  data = training(splits)),
        ets   = fit(wf_ets,    data = training(splits)),
        prop  = fit(wf_prop,   data = training(splits))
      ) |>  modeltime_calibrate(new_data = testing(splits)) |>  mutate(.model_desc = names(.model_id)),
      by = ".model_id"
    )
}

# 4) Apply to each series
results_tbl <- nested_tbl |> 
  mutate(
    metrics = map(data, make_models)
  ) |> 
  select(Location, SKU, metrics) |> 
  unnest(metrics)

# 5) Inspect metrics
best_models <- results_tbl |> 
  group_by(Location, SKU) |> 
  slice_min(rmse, n = 1) |> 
  select(Location, SKU, .model_desc, mae, rmse, mase) |> 
  distinct(Location, SKU, .keep_all = TRUE) 

avg_month <- df_monthly |>
  as.data.frame() |>
  group_by(Location, SKU) |>
  mutate(
    avg_month = mean(quantity)
  ) |>
  select(Location, SKU, avg_month) |>
  unique()

best_models <- best_models |>
  left_join(
    avg_month, by = c('Location', 'SKU')
  ) |>
  mutate(across(where(is.numeric), ~ round(.x, 2)))

DT::datatable(best_models)

```

# 3. Final Forecasting
```{r}
#| code-fold: true

# 6) Re-nest for final forecasting
forecast_tbl <- nested_tbl |> 
  left_join(
    results_tbl |> 
      group_by(Location, SKU) |> 
      slice_min(rmse, n = 1) |> 
      select(Location, SKU, .model_id),
    by = c("Location","SKU")
  ) |> 
  distinct(Location, SKU, .keep_all = TRUE) |> 
  mutate(
    # 1) build a 3-row modeltime_table for each series
    model_tbl = map(data, function(df) {
      rec      <- recipe(y ~ ds, data = df)
      wf_arima <- workflow() |> 
                    add_model(arima_reg() |>  set_engine("auto_arima")) |> 
                    add_recipe(rec)
      wf_ets   <- workflow() |> 
                    add_model(exp_smoothing() |>  set_engine("ets")) |> 
                    add_recipe(rec)
      wf_prop  <- workflow() |> 
                    add_model(prophet_reg() |>  set_engine("prophet")) |> 
                    add_recipe(rec)

      modeltime_table(
        arima = fit(wf_arima, df),
        ets   = fit(wf_ets,   df),
        prop  = fit(wf_prop,  df)
      ) 
    }),

    # 2) pick the chosen row by .model_id
    model = map2(model_tbl, .model_id, ~ slice(.x, .y)),

    # 3) refit that model on _all_ the data, then forecast 6 months out
    final_model = map2(model, data, ~ modeltime_refit(.x, data = .y))#,
  
  )

forecast_tbl2 <- forecast_tbl |> 
  mutate(
    # Re-calibrate each final_model on its own data
    calib_full = map2(final_model, data, ~ modeltime_calibrate(.x, new_data = .y)),
    forecast = map2(
      calib_full, data,
      ~ modeltime_forecast(.x,
          h           = "6 months",
          actual_data = .y
      )
    )
  )
```

::: {.panel-tabset}

## Location 0001

```{r}
#| code-fold: true
#| fig-column: page-right


library(xts)
library(dygraphs)

alpha_1 = forecast_tbl2 |> 
  subset(Location == '0001' & SKU =='Alpha')
 
alpha_1 = alpha_1$forecast |>
  as.data.frame()

alpha_1_xts <- xts(
  x = alpha_1[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_1$.index
)

dygraph(alpha_1_xts, main = "Forecast with 95% CI - Alpha*0001") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_1 = forecast_tbl2 |> 
  subset(Location == '0001' & SKU =='Beta')
 
beta_1 = beta_1$forecast |>
  as.data.frame()

beta_1_xts <- xts(
  x = beta_1[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_1$.index
)

dygraph(beta_1_xts, main = "Forecast with 95% CI - Beta*0001") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_1 = forecast_tbl2 |> 
  subset(Location == '0001' & SKU =='Gamma')
 
gamma_1 = gamma_1$forecast |>
  as.data.frame()

gamma_1_xts <- xts(
  x = gamma_1[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_1$.index
)

dygraph(gamma_1_xts, main = "Forecast with 95% CI - Gamma*0001") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0002

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_2 = forecast_tbl2 |> 
  subset(Location == '0002' & SKU =='Alpha')
 
alpha_2 = alpha_2$forecast |>
  as.data.frame()

alpha_2_xts <- xts(
  x = alpha_2[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_2$.index
)

dygraph(alpha_2_xts, main = "Forecast with 95% CI - Alpha*0002") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_2 = forecast_tbl2 |> 
  subset(Location == '0002' & SKU =='Beta')
 
beta_2 = beta_2$forecast |>
  as.data.frame()

beta_2_xts <- xts(
  x = beta_2[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_2$.index
)

dygraph(beta_2_xts, main = "Forecast with 95% CI - Beta*0002") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_2 = forecast_tbl2 |> 
  subset(Location == '0002' & SKU =='Gamma')
 
gamma_2 = gamma_2$forecast |>
  as.data.frame()

gamma_2_xts <- xts(
  x = gamma_2[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_2$.index
)

dygraph(gamma_2_xts, main = "Forecast with 95% CI - Gamma*0002") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0003

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_3 = forecast_tbl2 |> 
  subset(Location == '0003' & SKU =='Alpha')
 
alpha_3 = alpha_3$forecast |>
  as.data.frame()

alpha_3_xts <- xts(
  x = alpha_3[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_3$.index
)

dygraph(alpha_3_xts, main = "Forecast with 95% CI - Alpha*0003") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_3 = forecast_tbl2 |> 
  subset(Location == '0003' & SKU =='Beta')
 
beta_3 = beta_3$forecast |>
  as.data.frame()

beta_3_xts <- xts(
  x = beta_3[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_3$.index
)

dygraph(beta_3_xts, main = "Forecast with 95% CI - Beta*0003") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_3 = forecast_tbl2 |> 
  subset(Location == '0003' & SKU =='Gamma')
 
gamma_3 = gamma_3$forecast |>
  as.data.frame()

gamma_3_xts <- xts(
  x = gamma_3[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_3$.index
)

dygraph(gamma_3_xts, main = "Forecast with 95% CI - Gamma*0003") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0004

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_4 = forecast_tbl2 |> 
  subset(Location == '0004' & SKU =='Alpha')
 
alpha_4 = alpha_4$forecast |>
  as.data.frame()

alpha_4_xts <- xts(
  x = alpha_4[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_4$.index
)

dygraph(alpha_4_xts, main = "Forecast with 95% CI - Alpha*0004") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_4 = forecast_tbl2 |> 
  subset(Location == '0004' & SKU =='Beta')
 
beta_4 = beta_4$forecast |>
  as.data.frame()

beta_4_xts <- xts(
  x = beta_4[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_4$.index
)

dygraph(beta_4_xts, main = "Forecast with 95% CI - Beta*0004") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_4 = forecast_tbl2 |> 
  subset(Location == '0004' & SKU =='Gamma')
 
gamma_4 = gamma_4$forecast |>
  as.data.frame()

gamma_4_xts <- xts(
  x = gamma_4[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_4$.index
)

dygraph(gamma_4_xts, main = "Forecast with 95% CI - Gamma*0004") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0005

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_5 = forecast_tbl2 |> 
  subset(Location == '0005' & SKU =='Alpha')
 
alpha_5 = alpha_5$forecast |>
  as.data.frame()

alpha_5_xts <- xts(
  x = alpha_5[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_5$.index
)

dygraph(alpha_5_xts, main = "Forecast with 95% CI - Alpha*0005") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_5 = forecast_tbl2 |> 
  subset(Location == '0005' & SKU =='Beta')
 
beta_5 = beta_5$forecast |>
  as.data.frame()

beta_5_xts <- xts(
  x = beta_5[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_5$.index
)

dygraph(beta_5_xts, main = "Forecast with 95% CI - Beta*0005") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_5 = forecast_tbl2 |> 
  subset(Location == '0005' & SKU =='Gamma')
 
gamma_5 = gamma_5$forecast |>
  as.data.frame()

gamma_5_xts <- xts(
  x = gamma_5[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_5$.index
)

dygraph(gamma_5_xts, main = "Forecast with 95% CI - Gamma*0005") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0006

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_6 = forecast_tbl2 |> 
  subset(Location == '0006' & SKU =='Alpha')
 
alpha_6 = alpha_6$forecast |>
  as.data.frame()

alpha_6_xts <- xts(
  x = alpha_6[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_6$.index
)

dygraph(alpha_6_xts, main = "Forecast with 95% CI - Alpha*0006") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_6 = forecast_tbl2 |> 
  subset(Location == '0006' & SKU =='Beta')
 
beta_6 = beta_6$forecast |>
  as.data.frame()

beta_6_xts <- xts(
  x = beta_6[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_6$.index
)

dygraph(beta_6_xts, main = "Forecast with 95% CI - Beta*0006") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_6 = forecast_tbl2 |> 
  subset(Location == '0006' & SKU =='Gamma')
 
gamma_6 = gamma_6$forecast |>
  as.data.frame()

gamma_6_xts <- xts(
  x = gamma_6[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_6$.index
)

dygraph(gamma_6_xts, main = "Forecast with 95% CI - Gamma*0006") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0007

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_7 = forecast_tbl2 |> 
  subset(Location == '0007' & SKU =='Alpha')
 
alpha_7 = alpha_7$forecast |>
  as.data.frame()

alpha_7_xts <- xts(
  x = alpha_7[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_7$.index
)

dygraph(alpha_7_xts, main = "Forecast with 95% CI - Alpha*0007") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_7 = forecast_tbl2 |> 
  subset(Location == '0007' & SKU =='Beta')
 
beta_7 = beta_7$forecast |>
  as.data.frame()

beta_7_xts <- xts(
  x = beta_7[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_7$.index
)

dygraph(beta_7_xts, main = "Forecast with 95% CI - Beta*0007") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_7 = forecast_tbl2 |> 
  subset(Location == '0007' & SKU =='Gamma')
 
gamma_7 = gamma_7$forecast |>
  as.data.frame()

gamma_7_xts <- xts(
  x = gamma_7[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_7$.index
)

dygraph(gamma_7_xts, main = "Forecast with 95% CI - Gamma*0007") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0008

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_8 = forecast_tbl2 |> 
  subset(Location == '0008' & SKU =='Alpha')
 
alpha_8 = alpha_8$forecast |>
  as.data.frame()

alpha_8_xts <- xts(
  x = alpha_8[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_8$.index
)

dygraph(alpha_8_xts, main = "Forecast with 95% CI - Alpha*0008") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_8 = forecast_tbl2 |> 
  subset(Location == '0008' & SKU =='Beta')
 
beta_8 = beta_8$forecast |>
  as.data.frame()

beta_8_xts <- xts(
  x = beta_8[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_8$.index
)

dygraph(beta_8_xts, main = "Forecast with 95% CI - Beta*0008") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_8 = forecast_tbl2 |> 
  subset(Location == '0008' & SKU =='Gamma')
 
gamma_8 = gamma_8$forecast |>
  as.data.frame()

gamma_8_xts <- xts(
  x = gamma_8[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_8$.index
)

dygraph(gamma_8_xts, main = "Forecast with 95% CI - Gamma*0008") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0009

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_9 = forecast_tbl2 |> 
  subset(Location == '0009' & SKU =='Alpha')
 
alpha_9 = alpha_9$forecast |>
  as.data.frame()

alpha_9_xts <- xts(
  x = alpha_9[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_9$.index
)

dygraph(alpha_9_xts, main = "Forecast with 95% CI - Alpha*0009") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_9 = forecast_tbl2 |> 
  subset(Location == '0009' & SKU =='Beta')
 
beta_9 = beta_9$forecast |>
  as.data.frame()

beta_9_xts <- xts(
  x = beta_9[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_9$.index
)

dygraph(beta_9_xts, main = "Forecast with 95% CI - Beta*0009") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_9 = forecast_tbl2 |> 
  subset(Location == '0009' & SKU =='Gamma')
 
gamma_9 = gamma_9$forecast |>
  as.data.frame()

gamma_9_xts <- xts(
  x = gamma_9[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_9$.index
)

dygraph(gamma_9_xts, main = "Forecast with 95% CI - Gamma*0009") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

## Location 0010

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

alpha_10 = forecast_tbl2 |> 
  subset(Location == '0010' & SKU =='Alpha')
 
alpha_10 = alpha_10$forecast |>
  as.data.frame()

alpha_10_xts <- xts(
  x = alpha_10[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = alpha_10$.index
)

dygraph(alpha_10_xts, main = "Forecast with 95% CI - Alpha*0010") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector() 

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

beta_10 = forecast_tbl2 |> 
  subset(Location == '0010' & SKU =='Beta')
 
beta_10 = beta_10$forecast |>
  as.data.frame()

beta_10_xts <- xts(
  x = beta_10[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = beta_10$.index
)

dygraph(beta_10_xts, main = "Forecast with 95% CI - Beta*0010") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

```{r}
#| code-fold: true
#| fig-column: page-right

library(xts)
library(dygraphs)

gamma_10 = forecast_tbl2 |> 
  subset(Location == '0010' & SKU =='Gamma')
 
gamma_10 = gamma_10$forecast |>
  as.data.frame()

gamma_10_xts <- xts(
  x = gamma_10[, c(".value", ".conf_lo", ".conf_hi")],
  order.by = gamma_10$.index
)

dygraph(gamma_10_xts, main = "Forecast with 95% CI - Gamma*0010") |>
  dySeries(c(".conf_lo",".value", ".conf_hi")) |>
  dyOptions(
    drawPoints = TRUE,
    pointSize   = 2,
    strokeWidth = 2
  ) |>
  dyAxis("y", label = "Demand") |>
  dyRangeSelector()   

```

:::


# 4. Takeaways & Limitations

- **Low‐volume, intermittent series**

  - Most SKU×Location series average only a handful of units sold per month, with many zero‐demand months. 
  - Simple ARIMA/ETS/Prophet models struggled on the lowest‐volume, most intermittent series (high MAE/RMSE relative to mean demand).
  - If we cant to keep the SKU x Location level we could explore or time series forecasting methods which are designed for forecasting series with many zeros (Crostom for exemple.).Otherwise we can forecast at a higher level (Product Family or Region) and after that allocate down to SKU*Location by historical Sales.

- **Stock‐out bias**

  - Our data capture only fulfilled sales, not actual demand. When inventory is exhausted, recorded sales drop to zero, even if customer demand remained.

- **Inferring “Implied Demand”**

  - By incorporating inventory or production capacity data, we can estimate the unobserved portion of demand . Forecasting this implied demand rather than raw sales should yield more accurate predictions of true customer need.  